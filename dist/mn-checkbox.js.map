{"version":3,"sources":["scripts/mn-checkbox.component.js"],"names":["mnCheckbox","setInputAttribute","attribute","isDefaultAttribute","hasOwnProperty","attributeValue","element","getAttribute","name","isValidValue","values","indexOf","value","default","input","setAttribute","this","inputAttributes","labelText","label","document","createElement","text","textContent","appendChild","map","checkbox","className","prototype","Object","create","HTMLElement","createdCallback","registerElement"],"mappings":"AAAA,YAMA,SAASA,cAiDP,QAASC,mBAAkBC,WACzB,GAAIC,oBAAqBD,UAAUE,eAAe,WAC9CC,eAAiBC,QAAQC,aAAaL,UAAUM,KAEpD,IAAIL,mBAAoB,CACtB,GAAIM,cAAeP,UAAUE,eAAe,WACvCF,UAAUQ,OAAOC,QAAQN,iBAAmB,EAE7CO,MAAQH,aACRJ,eACAH,UAAUW,OAEdC,OAAMC,aAAab,UAAUM,KAAMI,WAC1BP,iBACTS,MAAMC,aAAab,UAAUM,KAAMH,gBA9DvC,GAAIC,SAAUU,KAEVC,kBAEAT,KAAM,OACNK,QAAS,aAGTL,KAAM,UAGNA,KAAM,SAGNA,KAAM,cAGNA,KAAM,aAGNA,KAAM,aAGNA,KAAM,aAKNU,UAAYZ,QAAQC,aAAa,SACjCY,MAAQC,SAASC,cAAc,SAC/BC,KAAOF,SAASC,cAAc,OAC9BH,aACFI,KAAKC,YAAcjB,QAAQC,aAAa,YACjCW,UADY,YAEfA,WAENC,MAAMK,YAAYF,KAGlB,IAAIR,OAAQM,SAASC,cAAc,QACnCJ,iBAAgBQ,IAAIxB,mBACpBkB,MAAMK,YAAYV,MAElB,IAAIY,UAAWN,SAASC,cAAc,MACtCK,UAASC,UAAY,WACrBR,MAAMK,YAAYE,UAClBpB,QAAQkB,YAAYL,OAnDtB,GAAIS,WAAYC,OAAOC,OAAOC,YAAYH,UAC1CA,WAAUI,gBAAkBhC,WAC5BoB,SAASa,gBAAgB,eAAgBL,UAAAA","file":"mn-checkbox.js","sourcesContent":["'use strict';\n\nlet prototype = Object.create(HTMLElement.prototype);\nprototype.createdCallback = mnCheckbox;\ndocument.registerElement('mn-checkbox', {prototype});\n\nfunction mnCheckbox() {\n  let element = this;\n\n  let inputAttributes = [\n    {\n      name: 'type',\n      default: 'checkbox',\n    },\n    {\n      name: 'value',\n    },\n    {\n      name: 'name',\n    },\n    {\n      name: 'autofocus',\n    },\n    {\n      name: 'readonly',\n    },\n    {\n      name: 'required',\n    },\n    {\n      name: 'disabled',\n    },\n  ];\n\n  // label element\n  let labelText = element.getAttribute('label');\n  let label = document.createElement('label');\n  let text = document.createElement('span');\n  if (labelText) {\n    text.textContent = element.getAttribute('disabled')\n      ? `${labelText} disabled`\n      : labelText;\n  }\n  label.appendChild(text);\n\n  // input element\n  let input = document.createElement('input');\n  inputAttributes.map(setInputAttribute);\n  label.appendChild(input);\n\n  let checkbox = document.createElement('div');\n  checkbox.className = 'checkbox';\n  label.appendChild(checkbox);\n  element.appendChild(label);\n\n  function setInputAttribute(attribute) {\n    let isDefaultAttribute = attribute.hasOwnProperty('default');\n    let attributeValue = element.getAttribute(attribute.name);\n\n    if (isDefaultAttribute) {\n      let isValidValue = attribute.hasOwnProperty('values')\n        && attribute.values.indexOf(attributeValue) >= 0;\n\n      let value = isValidValue\n        ? attributeValue\n        : attribute.default;\n\n      input.setAttribute(attribute.name, value);\n    } else if (attributeValue) {\n      input.setAttribute(attribute.name, attributeValue);\n    }\n  }\n}\n"],"sourceRoot":"/source/"}